<?php

/**
 * @file
 * Module file for mappy.
 */

/**
 * Implements hook_page_build().
 */
function mappy_page_build(&$page) {
  // Add module path for script locations.
  // We use this parameter to attach scripts when they needed.
  drupal_add_js(array('mappy_location' => drupal_get_path('module', 'mappy')), 'setting');
}

/**
 * Implements hook_filter_info().
 *
 * Declare our filter.
 */
function mappy_filter_info() {
  $filters['filter_mappy'] = array(
    'title' => t('Mappy filter.'),
    'description' => t('Every &lt;mappy /&gt; tag will be replaced with map.'),
    'prepare callback' => '_mappy_filter_prepare',
    'process callback' => '_mappy_filter_process',
    'tips callback' => '_mappy_filter_tips',
  );
  return $filters;
}

/**
 * Prepare text to filtering.
 * On this stage, we replace token [mappy] on html tag.
 */
function _mappy_filter_prepare($text, $filter) {
  // First, we find all mappy tokens.
  $pattern = "/\\[mappy(\\:(.+))?( .+)?\\]/isU";
  preg_match_all($pattern, $text, $matches);

  // In finded tokens, we get parameters.
  foreach ($matches[0] as $ci => $token) {
    $pattern = "/\\s+([a-zA-Z_]+)\\:(\\s+)?('(.*)'|([0-9a-zA-Z-а-яА-Я\\-\\.\\,]+))/i";
    preg_match_all($pattern, $text, $parameters);
    // And write parameters to an array.
    foreach ($parameters['0'] as $key => $name) {
      // Additional, we remove quotes.
      $att[$parameters['1'][$key]] = str_replace("'", "", $parameters['3'][$key]);
    }
    // Now we generate HTML Mappy tag.
    // Which service are using. Google or Yandex.
    $service = $matches[2][$ci];
    // Generate attributes.
    $attributes = "";
    foreach ($att as $key => $value) {
      $attributes .= " {$key}=\"{$value}\"";
    }
    // And add all to tag.
    $tag = "<mappy:{$service} {$attributes}></mappy:{$service}>";

    // Replace token for tag.
    $text = str_replace($token, $tag, $text);
  }

  return $text;
}

function _mappy_filter_process($text, $filter) {
  return $text;
}

function _mappy_filter_tips($filter, $format, $long = FALSE) {
  return t('<em>&lt;mappy /&gt;</em> will be replaced with map.');
}